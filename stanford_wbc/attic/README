				README
		Stanford Whole-Body Control Framework
		 http://stanford-wbc.sourceforge.net/

======================================================================
Whole-Body Control Framework
Copyright (c) 1997-2010 Stanford University. All rights reserved.
Released under LGPLv3.
See wbc/gpl-3.0.txt and wbc/lgpl-3.0.txt for more information.
----------------------------------------------------------------------
TAO Dynamics Engine
Copyright (c) 2005 Arachi, Inc. and Stanford University. All rights reserved.
Released under MIT License.
See tao/LICENSE for more information.
----------------------------------------------------------------------
Networking Mechanisms for Whole-Body Control (wbcnet)
Copyright (c) 2008-2009 Roland Philippsen <roland DOT philippsen AT gmx DOT net>
Released under BSD License.
See wbcnet/README for more information.
----------------------------------------------------------------------
TinyXML (renamed wbc_tinyxml to avoid version conflicts)
Copyright (c) 2000-2006 Lee Thomason (www.grinninglizard.com)
Released under zlib/libpng license.
See wbc_tinyxml/README for more information.
======================================================================


= Prerequisites =

Install the following four from your package manager or directly from
the original source.  Note that the build system will signal any
missing prerequisites and warn about missing optional or recommended
3rd-party libraries.

 * '''A C++ compiler:''' [[BR]]
   The WBC code is developed with GCC http://gcc.gnu.org/ ... other
   compilers should work as well but are not currently tested.
   
 * '''CMake 2.6''' or higher: [[BR]]
   Widely available from package managers. You can also get it from
   http://www.cmake.org/ (especially if your distro provides an older
   version such as CMake-2.4)

 * '''GNU ncurses''' (version 5 seems to work fine): [[BR]]
   Widely available from package managers.
   http://www.gnu.org/software/ncurses/

 * '''LAPACK''' (and thus, BLAS): [[BR]]
   Widely available as packages.

Some further prerequisites can be installed from your package manager
or from the 3rd-party tarballs available from
http://sourceforge.net/projects/stanford-wbc/files/
(e.g. stanford-wbc-3rdparty-0.0.tar.gz):

 * ''Required:'' '''expat''' version 1 or 2 [[BR]]
   Also available as package on pretty much any distro.
   http://expat.sourceforge.net/
   The stanford-wbc-3rdparty tarball contains version 2.0.1

 * ''Recommened:'' '''log4cxx''' version 0.10.0 [[BR]]
   (higher versions might work as well).
   Without log4cxx, you will not be able to control the verbosity of
   programs, they will simply print any warnings and errors to the
   console. It is fairly common that distros provide version 0.9.x,
   which unfortunately is not compatible with WBC, in which case
   you'll have to use the one provided by the stanford-wbc-3rdparty
   tarball or from http://logging.apache.org/log4cxx/

 * Optional: '''!XmlRpc++''' [[BR]]
   For easier integration with higher levels and GUIs.  The
   stanford-wbc-3rdparty tarball contains a CVS snapshot (from early
   2009) plus some local patches.  http://xmlrpcpp.sourceforge.net/

 * Optional: '''Google testing framework''' version 1.3.0 [[BR]]
   (other version might work, too) The stanford-wbc-3rdparty tarball
   contains version 1.3.0, or get the freshest from
   http://code.google.com/p/googletest/

Given that log4cxx, gtest, and !XmlRpc++ are somewhat likely to need
custom installation on your machine, you can tell CMake where to find
them by using the environment (or CMake) variables LOG4CXX_DIR,
GTEST_DIR, and XMLRPC_DIR. If they are all installed in the same
location, you can just set one of these three variables and the build
system should find them all.


= Installation =


== Download and install 3rd party libraries ==

Install desired 3rd-party libraries using the build scripts from the
stanford-wbc-3rdparty tarball. Note that most of them are optional,
except for expat which is widely available from package managers.
Let's assume that you want to install log4cxx into
{{{/usr/local/wbc}}}. You can install anywhere you like, you are going
to tell CMake how to find the 3rd-party package anyhow. The other
3rd-party packages follow the same approach.

 * Go to http://sourceforge.net/projects/stanford-wbc/files/ and
   download the latest stanford-wbc-3rdparty-X.Y.tar.gz
 * Unpack the tarball somewhere (replacing X.Y with the version you
   actually downloaded):
   {{{
    $ tar xfvz stanford-wbc-3rdparty-X.Y.tar.gz
   }}}
 * Use the provided build script to install log4cxx into
   {{{/usr/local/wbc}}}:
   {{{
    $ cd stanford-wbc-3rdparty-X.Y/log4cxx
    $ ./buildme.sh /usr/local/wbc
   }}}
   The build script will invoke {{{sudo}}} in case it needs root
   privileges.
 * Proceed similarly for the other 3rd-party packages that you want to
   install.


== Download and unpack (or check out) the Sources ==

You can follow the stable code by downloading a the latest source
tarball from http://sourceforge.net/projects/stanford-wbc/files/
(e.g. stanford-wbc-0.2.tar.gz at the time of writing). Just unpack the
tarball wherever you like:

{{{
 $ tar xfvz stanford-wbc-0.2.tar.gz
}}}

In order to check out the latest source, you need to install GIT
http://git-scm.com/ (very widely available via package managers). Then
just clone our repository:

{{{
 $ git clone git://stanford-wbc.git.sourceforge.net/gitroot/stanford-wbc/stanford-wbc.git
}}}


== Configure the build ==

We use CMake-2.6 as build tool, which works in two steps. First, you
configure the build (checking for dependencies and setting up the
include and link paths), then you build the project. CMake will
complain if it does not find required packages. You can tell CMake
about the 3rd-party packages in two ways: either using environment
variables, or passing CMake variables on the command line. Note that
if you've installed dependencies using a package manager or into a
standard sysrtem location, CMake will most likely pick them up without
any further information.

For example, if you have installed log4cxx into {{{/usr/local/wbc}}}
as explained above, then you have to tell CMake where to find it by
setting the {{{LOG4CXX_DIR}}} variable. For gtest and !XmlRpc++, these
variables are called {{{GTEST_DIR}}} and {{{XMLRPC_DIR}}}.

It is recommended to build everything in a separate build directory,
as follows (assuming your sources are in stanford-wbc-0.2 and have
installed log4cxx in {{{/usr/local/wbc}}}):

{{{
 $ mkdir stanford-wbc-0.2/build
 $ cd stanford-wbc-0.2/build
 $ cmake .. -DLOG4CXX_DIR:path=/usr/local/wbc
 $ make
}}}


= Upgrading =

If you have checked out the sources using git, then it is usually
trivial to upgrade. Simply "git pull" in your source tree, go into the
build directory, and type "make" again. Sometimes, however, major
changes are introduced, and then it might be
better to clean out your build and re-run CMake (don't forget the
command-line arguments that allow it to find your 3rd-party packages
in case of non-standard installation locations).
